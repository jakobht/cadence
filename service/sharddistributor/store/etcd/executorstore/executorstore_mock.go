// Code generated by MockGen. DO NOT EDIT.
// Source: etcdstore.go
//
// Generated by this command:
//
//	mockgen -package executorstore -source etcdstore.go -destination=executorstore_mock.go ExecutorStore
//

// Package executorstore is a generated GoMock package.
package executorstore

import (
	context "context"
	reflect "reflect"

	store "github.com/uber/cadence/service/sharddistributor/store"
	gomock "go.uber.org/mock/gomock"
)

// MockExecutorStore is a mock of ExecutorStore interface.
type MockExecutorStore struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorStoreMockRecorder
	isgomock struct{}
}

// MockExecutorStoreMockRecorder is the mock recorder for MockExecutorStore.
type MockExecutorStoreMockRecorder struct {
	mock *MockExecutorStore
}

// NewMockExecutorStore creates a new mock instance.
func NewMockExecutorStore(ctrl *gomock.Controller) *MockExecutorStore {
	mock := &MockExecutorStore{ctrl: ctrl}
	mock.recorder = &MockExecutorStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutorStore) EXPECT() *MockExecutorStoreMockRecorder {
	return m.recorder
}

// AssignShard mocks base method.
func (m *MockExecutorStore) AssignShard(ctx context.Context, namespace, shardID, executorID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignShard", ctx, namespace, shardID, executorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignShard indicates an expected call of AssignShard.
func (mr *MockExecutorStoreMockRecorder) AssignShard(ctx, namespace, shardID, executorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignShard", reflect.TypeOf((*MockExecutorStore)(nil).AssignShard), ctx, namespace, shardID, executorID)
}

// AssignShards mocks base method.
func (m *MockExecutorStore) AssignShards(ctx context.Context, namespace string, request store.AssignShardsRequest, guard store.GuardFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignShards", ctx, namespace, request, guard)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignShards indicates an expected call of AssignShards.
func (mr *MockExecutorStoreMockRecorder) AssignShards(ctx, namespace, request, guard any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignShards", reflect.TypeOf((*MockExecutorStore)(nil).AssignShards), ctx, namespace, request, guard)
}

// DeleteExecutors mocks base method.
func (m *MockExecutorStore) DeleteExecutors(ctx context.Context, namespace string, executorIDs []string, guard store.GuardFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExecutors", ctx, namespace, executorIDs, guard)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExecutors indicates an expected call of DeleteExecutors.
func (mr *MockExecutorStoreMockRecorder) DeleteExecutors(ctx, namespace, executorIDs, guard any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExecutors", reflect.TypeOf((*MockExecutorStore)(nil).DeleteExecutors), ctx, namespace, executorIDs, guard)
}

// GetHeartbeat mocks base method.
func (m *MockExecutorStore) GetHeartbeat(ctx context.Context, namespace, executorID string) (*store.HeartbeatState, *store.AssignedState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeartbeat", ctx, namespace, executorID)
	ret0, _ := ret[0].(*store.HeartbeatState)
	ret1, _ := ret[1].(*store.AssignedState)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHeartbeat indicates an expected call of GetHeartbeat.
func (mr *MockExecutorStoreMockRecorder) GetHeartbeat(ctx, namespace, executorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeartbeat", reflect.TypeOf((*MockExecutorStore)(nil).GetHeartbeat), ctx, namespace, executorID)
}

// GetState mocks base method.
func (m *MockExecutorStore) GetState(ctx context.Context, namespace string) (*store.NamespaceState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", ctx, namespace)
	ret0, _ := ret[0].(*store.NamespaceState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockExecutorStoreMockRecorder) GetState(ctx, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockExecutorStore)(nil).GetState), ctx, namespace)
}

// RecordHeartbeat mocks base method.
func (m *MockExecutorStore) RecordHeartbeat(ctx context.Context, namespace, executorID string, request store.HeartbeatState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordHeartbeat", ctx, namespace, executorID, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordHeartbeat indicates an expected call of RecordHeartbeat.
func (mr *MockExecutorStoreMockRecorder) RecordHeartbeat(ctx, namespace, executorID, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHeartbeat", reflect.TypeOf((*MockExecutorStore)(nil).RecordHeartbeat), ctx, namespace, executorID, request)
}

// Start mocks base method.
func (m *MockExecutorStore) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockExecutorStoreMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockExecutorStore)(nil).Start))
}

// Stop mocks base method.
func (m *MockExecutorStore) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockExecutorStoreMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockExecutorStore)(nil).Stop))
}

// Subscribe mocks base method.
func (m *MockExecutorStore) Subscribe(ctx context.Context, namespace string) (<-chan int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, namespace)
	ret0, _ := ret[0].(<-chan int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockExecutorStoreMockRecorder) Subscribe(ctx, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockExecutorStore)(nil).Subscribe), ctx, namespace)
}
