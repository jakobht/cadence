// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-yarpc-go. DO NOT EDIT.
// source: uber/cadence/shardmanager/v1/control.proto

package shardmanagerv1

import (
	"context"
	"io/ioutil"
	"reflect"

	"github.com/gogo/protobuf/jsonpb"
	"github.com/gogo/protobuf/proto"
	"go.uber.org/fx"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/api/x/restriction"
	"go.uber.org/yarpc/encoding/protobuf"
	"go.uber.org/yarpc/encoding/protobuf/reflection"
)

var _ = ioutil.NopCloser

// ShardManagerControlAPIYARPCClient is the YARPC client-side interface for the ShardManagerControlAPI service.
type ShardManagerControlAPIYARPCClient interface {
	HearthBeat(context.Context, ...yarpc.CallOption) (ShardManagerControlAPIServiceHearthBeatYARPCClient, error)
}

// ShardManagerControlAPIServiceHearthBeatYARPCClient sends HearthBeatRequests and receives HearthBeatResponses, returning io.EOF when the stream is complete.
type ShardManagerControlAPIServiceHearthBeatYARPCClient interface {
	Context() context.Context
	Send(*HearthBeatRequest, ...yarpc.StreamOption) error
	Recv(...yarpc.StreamOption) (*HearthBeatResponse, error)
	CloseSend(...yarpc.StreamOption) error
}

func newShardManagerControlAPIYARPCClient(clientConfig transport.ClientConfig, anyResolver jsonpb.AnyResolver, options ...protobuf.ClientOption) ShardManagerControlAPIYARPCClient {
	return &_ShardManagerControlAPIYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "uber.cadence.shardmanager.v1.ShardManagerControlAPI",
			ClientConfig: clientConfig,
			AnyResolver:  anyResolver,
			Options:      options,
		},
	)}
}

// NewShardManagerControlAPIYARPCClient builds a new YARPC client for the ShardManagerControlAPI service.
func NewShardManagerControlAPIYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) ShardManagerControlAPIYARPCClient {
	return newShardManagerControlAPIYARPCClient(clientConfig, nil, options...)
}

// ShardManagerControlAPIYARPCServer is the YARPC server-side interface for the ShardManagerControlAPI service.
type ShardManagerControlAPIYARPCServer interface {
	HearthBeat(ShardManagerControlAPIServiceHearthBeatYARPCServer) error
}

// ShardManagerControlAPIServiceHearthBeatYARPCServer receives HearthBeatRequests and sends HearthBeatResponse.
type ShardManagerControlAPIServiceHearthBeatYARPCServer interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*HearthBeatRequest, error)
	Send(*HearthBeatResponse, ...yarpc.StreamOption) error
}

type buildShardManagerControlAPIYARPCProceduresParams struct {
	Server      ShardManagerControlAPIYARPCServer
	AnyResolver jsonpb.AnyResolver
}

func buildShardManagerControlAPIYARPCProcedures(params buildShardManagerControlAPIYARPCProceduresParams) []transport.Procedure {
	handler := &_ShardManagerControlAPIYARPCHandler{params.Server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName:         "uber.cadence.shardmanager.v1.ShardManagerControlAPI",
			UnaryHandlerParams:  []protobuf.BuildProceduresUnaryHandlerParams{},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{
				{
					MethodName: "HearthBeat",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.HearthBeat,
						},
					),
				},
			},
		},
	)
}

// BuildShardManagerControlAPIYARPCProcedures prepares an implementation of the ShardManagerControlAPI service for YARPC registration.
func BuildShardManagerControlAPIYARPCProcedures(server ShardManagerControlAPIYARPCServer) []transport.Procedure {
	return buildShardManagerControlAPIYARPCProcedures(buildShardManagerControlAPIYARPCProceduresParams{Server: server})
}

// FxShardManagerControlAPIYARPCClientParams defines the input
// for NewFxShardManagerControlAPIYARPCClient. It provides the
// paramaters to get a ShardManagerControlAPIYARPCClient in an
// Fx application.
type FxShardManagerControlAPIYARPCClientParams struct {
	fx.In

	Provider    yarpc.ClientConfig
	AnyResolver jsonpb.AnyResolver  `name:"yarpcfx" optional:"true"`
	Restriction restriction.Checker `optional:"true"`
}

// FxShardManagerControlAPIYARPCClientResult defines the output
// of NewFxShardManagerControlAPIYARPCClient. It provides a
// ShardManagerControlAPIYARPCClient to an Fx application.
type FxShardManagerControlAPIYARPCClientResult struct {
	fx.Out

	Client ShardManagerControlAPIYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxShardManagerControlAPIYARPCClient provides a ShardManagerControlAPIYARPCClient
// to an Fx application using the given name for routing.
//
//	fx.Provide(
//	  shardmanagerv1.NewFxShardManagerControlAPIYARPCClient("service-name"),
//	  ...
//	)
func NewFxShardManagerControlAPIYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxShardManagerControlAPIYARPCClientParams) FxShardManagerControlAPIYARPCClientResult {
		cc := params.Provider.ClientConfig(name)

		if params.Restriction != nil {
			if namer, ok := cc.GetUnaryOutbound().(transport.Namer); ok {
				if err := params.Restriction.Check(protobuf.Encoding, namer.TransportName()); err != nil {
					panic(err.Error())
				}
			}
		}

		return FxShardManagerControlAPIYARPCClientResult{
			Client: newShardManagerControlAPIYARPCClient(cc, params.AnyResolver, options...),
		}
	}
}

// FxShardManagerControlAPIYARPCProceduresParams defines the input
// for NewFxShardManagerControlAPIYARPCProcedures. It provides the
// paramaters to get ShardManagerControlAPIYARPCServer procedures in an
// Fx application.
type FxShardManagerControlAPIYARPCProceduresParams struct {
	fx.In

	Server      ShardManagerControlAPIYARPCServer
	AnyResolver jsonpb.AnyResolver `name:"yarpcfx" optional:"true"`
}

// FxShardManagerControlAPIYARPCProceduresResult defines the output
// of NewFxShardManagerControlAPIYARPCProcedures. It provides
// ShardManagerControlAPIYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxShardManagerControlAPIYARPCProceduresResult struct {
	fx.Out

	Procedures     []transport.Procedure `group:"yarpcfx"`
	ReflectionMeta reflection.ServerMeta `group:"yarpcfx"`
}

// NewFxShardManagerControlAPIYARPCProcedures provides ShardManagerControlAPIYARPCServer procedures to an Fx application.
// It expects a ShardManagerControlAPIYARPCServer to be present in the container.
//
//	fx.Provide(
//	  shardmanagerv1.NewFxShardManagerControlAPIYARPCProcedures(),
//	  ...
//	)
func NewFxShardManagerControlAPIYARPCProcedures() interface{} {
	return func(params FxShardManagerControlAPIYARPCProceduresParams) FxShardManagerControlAPIYARPCProceduresResult {
		return FxShardManagerControlAPIYARPCProceduresResult{
			Procedures: buildShardManagerControlAPIYARPCProcedures(buildShardManagerControlAPIYARPCProceduresParams{
				Server:      params.Server,
				AnyResolver: params.AnyResolver,
			}),
			ReflectionMeta: ShardManagerControlAPIReflectionMeta,
		}
	}
}

// ShardManagerControlAPIReflectionMeta is the reflection server metadata
// required for using the gRPC reflection protocol with YARPC.
//
// See https://github.com/grpc/grpc/blob/master/doc/server-reflection.md.
var ShardManagerControlAPIReflectionMeta = reflection.ServerMeta{
	ServiceName:     "uber.cadence.shardmanager.v1.ShardManagerControlAPI",
	FileDescriptors: yarpcFileDescriptorClosure84b31fbf2f1f3b1d,
}

type _ShardManagerControlAPIYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_ShardManagerControlAPIYARPCCaller) HearthBeat(ctx context.Context, options ...yarpc.CallOption) (ShardManagerControlAPIServiceHearthBeatYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "HearthBeat", options...)
	if err != nil {
		return nil, err
	}
	return &_ShardManagerControlAPIServiceHearthBeatYARPCClient{stream: stream}, nil
}

type _ShardManagerControlAPIYARPCHandler struct {
	server ShardManagerControlAPIYARPCServer
}

func (h *_ShardManagerControlAPIYARPCHandler) HearthBeat(serverStream *protobuf.ServerStream) error {
	return h.server.HearthBeat(&_ShardManagerControlAPIServiceHearthBeatYARPCServer{serverStream: serverStream})
}

type _ShardManagerControlAPIServiceHearthBeatYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_ShardManagerControlAPIServiceHearthBeatYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_ShardManagerControlAPIServiceHearthBeatYARPCClient) Send(request *HearthBeatRequest, options ...yarpc.StreamOption) error {
	return c.stream.Send(request, options...)
}

func (c *_ShardManagerControlAPIServiceHearthBeatYARPCClient) Recv(options ...yarpc.StreamOption) (*HearthBeatResponse, error) {
	responseMessage, err := c.stream.Receive(newShardManagerControlAPIServiceHearthBeatYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HearthBeatResponse)
	if !ok {
		return nil, protobuf.CastError(emptyShardManagerControlAPIServiceHearthBeatYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_ShardManagerControlAPIServiceHearthBeatYARPCClient) CloseSend(options ...yarpc.StreamOption) error {
	return c.stream.Close(options...)
}

type _ShardManagerControlAPIServiceHearthBeatYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_ShardManagerControlAPIServiceHearthBeatYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_ShardManagerControlAPIServiceHearthBeatYARPCServer) Recv(options ...yarpc.StreamOption) (*HearthBeatRequest, error) {
	requestMessage, err := s.serverStream.Receive(newShardManagerControlAPIServiceHearthBeatYARPCRequest, options...)
	if requestMessage == nil {
		return nil, err
	}
	request, ok := requestMessage.(*HearthBeatRequest)
	if !ok {
		return nil, protobuf.CastError(emptyShardManagerControlAPIServiceHearthBeatYARPCRequest, requestMessage)
	}
	return request, err
}

func (s *_ShardManagerControlAPIServiceHearthBeatYARPCServer) Send(response *HearthBeatResponse, options ...yarpc.StreamOption) error {
	return s.serverStream.Send(response, options...)
}

func newShardManagerControlAPIServiceHearthBeatYARPCRequest() proto.Message {
	return &HearthBeatRequest{}
}

func newShardManagerControlAPIServiceHearthBeatYARPCResponse() proto.Message {
	return &HearthBeatResponse{}
}

var (
	emptyShardManagerControlAPIServiceHearthBeatYARPCRequest  = &HearthBeatRequest{}
	emptyShardManagerControlAPIServiceHearthBeatYARPCResponse = &HearthBeatResponse{}
)

var yarpcFileDescriptorClosure84b31fbf2f1f3b1d = [][]byte{
	// uber/cadence/shardmanager/v1/control.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0xcf, 0x4b, 0xc3, 0x30,
		0x14, 0x26, 0x53, 0xc4, 0x65, 0x78, 0x30, 0x88, 0x14, 0xf5, 0x50, 0x7a, 0x2a, 0x0a, 0xc9, 0x3a,
		0x8f, 0x5e, 0xdc, 0x76, 0x71, 0x38, 0x41, 0xea, 0xcd, 0xcb, 0x48, 0xdb, 0xb7, 0x76, 0xb8, 0xe5,
		0xcd, 0x24, 0x2d, 0xec, 0xe2, 0x7f, 0xe0, 0xff, 0x2c, 0x4d, 0x1d, 0x76, 0x0a, 0xc3, 0x5b, 0xdf,
		0xc7, 0xf7, 0xab, 0xf9, 0xe8, 0x75, 0x99, 0x80, 0x16, 0xa9, 0xcc, 0x40, 0xa5, 0x20, 0x4c, 0x21,
		0x75, 0xb6, 0x92, 0x4a, 0xe6, 0xa0, 0x45, 0x15, 0x89, 0x14, 0x95, 0xd5, 0xb8, 0xe4, 0x6b, 0x8d,
		0x16, 0xd9, 0x55, 0xcd, 0xe5, 0xdf, 0x5c, 0xde, 0xe6, 0xf2, 0x2a, 0x0a, 0xee, 0xe9, 0xc9, 0x4b,
		0x0d, 0x4d, 0x51, 0x66, 0x13, 0x35, 0x47, 0x76, 0x49, 0xbb, 0x8e, 0x33, 0x7b, 0x83, 0x8d, 0x47,
		0x7c, 0x12, 0x76, 0xe3, 0x63, 0x07, 0x3c, 0xc2, 0x86, 0x31, 0x7a, 0xb8, 0x44, 0x99, 0x79, 0x1d,
		0x9f, 0x84, 0x24, 0x76, 0xdf, 0xc1, 0x07, 0x3d, 0x7d, 0x00, 0xa9, 0x6d, 0x31, 0x02, 0x69, 0x63,
		0x78, 0x2f, 0xc1, 0xd8, 0xda, 0xa5, 0x40, 0x63, 0x67, 0x0b, 0x35, 0xc7, 0xad, 0x4b, 0x0d, 0xb8,
		0x88, 0x29, 0xed, 0x35, 0x11, 0xb5, 0xde, 0x78, 0x1d, 0xff, 0x20, 0xec, 0x0d, 0x6e, 0xf8, 0xbe,
		0x9e, 0x7c, 0xa7, 0x64, 0x4c, 0xcd, 0xf6, 0x34, 0xc1, 0x19, 0x65, 0xed, 0x7c, 0xb3, 0x46, 0x65,
		0x60, 0xf0, 0x49, 0xe8, 0xb9, 0xd3, 0x3c, 0x35, 0x1e, 0xe3, 0xe6, 0x4d, 0x86, 0xcf, 0x13, 0x66,
		0x28, 0xfd, 0x11, 0x30, 0xb1, 0x3f, 0xf7, 0xcf, 0xaf, 0x5d, 0xf4, 0xff, 0x2f, 0x68, 0xba, 0x84,
		0xa4, 0x4f, 0x46, 0xe3, 0xd7, 0x61, 0xbe, 0xb0, 0x45, 0x99, 0xf0, 0x14, 0x57, 0x62, 0x67, 0x3e,
		0x9e, 0x83, 0x12, 0x6e, 0xab, 0xdf, 0x4b, 0xde, 0xb5, 0xef, 0x2a, 0x4a, 0x8e, 0x1c, 0xeb, 0xf6,
		0x2b, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x0f, 0xa3, 0xe1, 0xff, 0x01, 0x00, 0x00,
	},
}

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) ShardManagerControlAPIYARPCClient {
			return NewShardManagerControlAPIYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}
